<!DOCTYPE html>
<html>

<head>
  <title>es-read</title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
</head>

<body>
  <h1>Catalog</h1>
  <section id="catalog">

  </section>
</body>
<script>
  let catalog = [
    // es6 catalog
     {
      "title": "let 和 const 命令 + 变量的解构赋值(done)",
      "page": "let_destructuring"
    }, {
      "title": "字符串的扩展",
      "page": "string"
    }, {
      "title": "正则的扩展",
      "page": "regex"
    }, {
      "title": "数值的扩展",
      "page": "number"
    }, {
      "title": "函数的扩展",
      "page": "function"
    }, {
      "title": "数组的扩展",
      "page": "array"
    }, {
      "title": "对象的扩展",
      "page": "object"
    }, {
      "title": "Symbol",
      "page": "symbol"
    }, {
      "title": "Set 和 Map 数据结构",
      "page": "set-map"
    }, {
      "title": "Proxy(doing)",
      "page": "proxy"
    }, {
      "title": "Reflect",
      "page": "reflect"
    }, {
      "title": "Promise 对象",
      "page": "promise"
    }, {
      "title": "Iterator 和 for...of 循环",
      "page": "iterator"
    }, {
      "title": "Generator 函数的语法",
      "page": "generator"
    }, {
      "title": "Generator 函数的异步应用",
      "page": "generator-async"
    }, {
      "title": "async 函数",
      "page": "async"
    }, {
      "title": "Class 的基本语法",
      "page": "class"
    }, {
      "title": "Class 的继承",
      "page": "class-extends"
    }, {
      "title": "Decorator",
      "page": "decorator"
    }, {
      "title": "Module 的语法",
      "page": "module"
    }, {
      "title": "Module 的加载实现",
      "page": "module-loader"
    }, {
      "title": "编程风格",
      "page": "style"
    }, {
      "title": "读懂规格",
      "page": "spec"
    }, {
      "title": "ArrayBuffer",
      "page": "arraybuffer"
    }, {
      "title": "参考链接",
      "page": "reference"
    }
  ]
  let createHref = item => `<a href="/pages/es5/${item.page}">${item.title}</a>`
  document.querySelector('#catalog').innerHTML = catalog.map(createHref).join('')
</script>

</html>